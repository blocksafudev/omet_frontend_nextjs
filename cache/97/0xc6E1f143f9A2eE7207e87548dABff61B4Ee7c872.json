{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BankRoll.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\\n// BankRoll\\ncontract BankRoll {\\n    uint256 private _reEntancyStatus = 1; //Non_Entered\\n    uint256 public balanceOfBNBInBankRoll;\\n    address public owner;\\n    mapping(address => uint256) public tokenBalance;\\n    mapping(address => bool) public whitelistedAddresses;\\n    /* ========== EVENTS ========== */\\n    event Withdraw(address indexed withdrawActionBy, address indexed to, uint256 indexed amount);\\n    event EtherDeposited(address indexed from, uint256 indexed amount);\\n    event SentWinAmount(address indexed game, address indexed user, uint256 amount, address indexed token);\\n    event WhitelistStatus(address[] indexed contractAddresses, bool isWhitelisted);\\n\\n    /* ========== ERRORS ========== */\\n    error AddressNotWhiteListed(address _inputAddress);\\n    error CallerIsNotOwner(address _owner);\\n    error ArrayLengthCantBeZero();\\n    error ETHTransferFailed(address _to, uint256 _amount);\\n    error ReEntrantCall();\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert CallerIsNotOwner(owner);\\n        }\\n        _;\\n    }\\n    modifier nonReentrant() {\\n        if (_reEntancyStatus == 2) {\\n            revert ReEntrantCall();\\n        }\\n        _reEntancyStatus = 2; //Entered\\n        _;\\n        _reEntancyStatus = 1;\\n    }\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        if (whitelistedAddresses[msg.sender] || msg.sender == owner) {\\n            balanceOfBNBInBankRoll += msg.value;\\n        }\\n        emit EtherDeposited(msg.sender, msg.value);\\n    }\\n\\n    function whitelist(address[] calldata addresses, bool isWhitelisted) external onlyOwner {\\n        if (addresses.length == 0) {\\n            revert ArrayLengthCantBeZero();\\n        }\\n        for (uint256 i = 0; i < addresses.length; ) {\\n            whitelistedAddresses[addresses[i]] = isWhitelisted;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        emit WhitelistStatus(addresses, isWhitelisted);\\n    }\\n\\n    function sendWinAmount(address user, uint256 amount, address _token) external nonReentrant {\\n        if (!whitelistedAddresses[msg.sender]) {\\n            revert AddressNotWhiteListed(msg.sender);\\n        }\\n        if (_token == address(0)) {\\n            balanceOfBNBInBankRoll -= amount;\\n            _withdrawEther(user, amount);\\n        } else {\\n            tokenBalance[_token] -= amount;\\n            IERC20(_token).transfer(user, amount);\\n        }\\n        emit SentWinAmount(msg.sender, user, amount, _token);\\n    }\\n\\n    /// Deposit any IERC20 tokens in this contract\\n    function depositTokens(address _token, uint256 _amount) external onlyOwner nonReentrant {\\n        tokenBalance[_token] += _amount;\\n        IERC20(_token).transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    /// Approve Transfer\\n    function approve(address _token, address target, uint256 amount) external onlyOwner nonReentrant {\\n        IERC20(_token).approve(target, amount);\\n    }\\n\\n    /// Withdraw any IERC20 tokens accumulated in this contract\\n    function withdrawTokens(address _token, uint256 _amount) external onlyOwner nonReentrant {\\n        tokenBalance[_token] -= _amount;\\n        IERC20(_token).transfer(msg.sender, _amount);\\n    }\\n\\n    /// Withdraw Ether accumulated in this contract\\n    function withdrawEther(address to, uint256 amount) external onlyOwner nonReentrant {\\n        balanceOfBNBInBankRoll -= amount;\\n        _withdrawEther(to, amount);\\n        emit Withdraw(msg.sender, to, amount);\\n    }\\n\\n    function _withdrawEther(address user, uint256 amount) internal {\\n        (bool sent, ) = payable(user).call{value: amount}('');\\n        if (!sent) {\\n            revert ETHTransferFailed(user, amount);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputAddress\",\"type\":\"address\"}],\"name\":\"AddressNotWhiteListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ArrayLengthCantBeZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"CallerIsNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReEntrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EtherDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"game\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SentWinAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address[]\",\"name\":\"contractAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"WhitelistStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawActionBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfBNBInBankRoll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendWinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isWhitelisted\",\"type\":\"bool\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEther\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]","ContractName":"BankRoll","CompilerVersion":"v0.8.18+commit.87f61d96","OptimizationUsed":"1","Runs":"1000","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}