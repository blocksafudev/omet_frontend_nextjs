{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155Receiver.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155Holder is ERC1155Receiver {\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Receiver.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/Bullish.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >= 0.8.17;\\n// You don't need SafeMath library for Solidity 0.8+. \\n\\n//---------------------------------------------------------\\n// Imports\\n//---------------------------------------------------------\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\nimport \\\"./interfaces/ITokenXBaseV3.sol\\\";\\nimport \\\"./interfaces/ICakeBaker.sol\\\";\\n\\n//---------------------------------------------------------\\n// Contract\\n//---------------------------------------------------------\\ncontract Bullish is ReentrancyGuard, Pausable, ERC1155Holder\\n{\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tstruct PoolInfo\\n\\t{\\n\\t\\taddress address_stake_token;\\n\\t\\taddress address_reward_token;\\n\\t\\t\\n\\t\\tuint256 harvest_interval;\\n\\t\\tuint256 alloc_point;\\n\\t\\tuint256 total_staked_amount;\\n\\n\\t\\tuint256 accu_reward_amount_per_share_e12;\\n\\t\\tuint256 total_xnft_boost_rate_e4;\\n\\t}\\n\\n\\tstruct FeeInfo\\n\\t{\\n\\t\\tuint256 deposit_e4; // 300 is 3%\\n\\t\\tuint256 withdrawal_max_e4;\\n\\t\\tuint256 withdrawal_min_e4;\\n\\t\\tuint256 withdrawal_period; // decrease time from max to min\\n\\t}\\n\\n\\tstruct RewardInfo\\n\\t{\\n\\t\\tuint256 start_block_id;\\n\\t\\tuint256 last_rewarded_block_id;\\t\\n\\t\\tuint256 emission_per_block;\\n\\n\\t\\tuint256 total_alloc_point;\\n\\t\\tuint256 total_locked_amount;\\n\\t}\\n\\n\\tstruct UserInfo\\n\\t{\\n\\t\\tuint256 staked_amount;\\n\\t\\tuint256 paid_reward_amount;\\n\\t\\tuint256 locked_reward_amount;\\n\\n\\t\\tuint256 last_deposit_time;\\n\\t\\tuint256 next_harvest_time;\\n\\n\\t\\tuint256[] xnft_id_list; // APR booster\\n\\t\\tuint256 xnft_boost_rate_e4; // 300 is 3%\\n\\t}\\n\\n\\tuint256 public constant MAX_HARVEST_INTERVAL = 14 days;\\n\\tuint256 public constant MAX_DEPOSIT_FEE_E4 = 2000; // 20%\\n\\tuint256 public constant MIN_WITHDRAWAL_FEE_E4 = 0; // 0%\\n\\tuint256 public constant MAX_WITHDRAWAL_FEE_E4 = 2000; // 20%\\n\\n\\taddress public address_chick; // for tax\\n\\taddress public address_operator;\\n\\taddress public address_cakebaker; // for delegate farming at pancakeswap\\n\\n\\taddress public address_xnft;\\n\\tuint256[] xnft_level_prefix = [1000000, 2000000, 3000000];\\n\\tuint256[] xnft_boost_rate_e4 = [300, 600, 900];\\n\\n\\tPoolInfo[] public pool_info; // pool_id / pool_info\\n\\tFeeInfo[] public fee_info; // pool_id / fee_info\\n\\tmapping(address => bool) public is_pool_exist;\\n\\tmapping(uint256 => mapping(address => UserInfo)) public user_info; // pool_id / user_adddress / user_info\\n\\tmapping(address => RewardInfo) public reward_info; // reward_address / reward_info\\n\\n\\t//---------------------------------------------------------------\\n\\t// Front-end connectors\\n\\t//---------------------------------------------------------------\\n\\tevent PauseCB(address indexed operator);\\n\\tevent ResumeCB(address indexed operator);\\n\\tevent SetChickCB(address indexed operator, address _controller);\\n\\tevent SetCakeBakerCB(address indexed operator, address _controller);\\n\\tevent UpdateEmissionRateCB(address indexed operator, uint256 _reward_per_block);\\n\\tevent SetOperatorCB(address indexed operator, address _new_operator);\\n\\tevent SetNFTBoosterCB(address indexed operator, address _address_xnft);\\n\\tevent MakePoolCB(address indexed operator, uint256 new_pool_id);\\n\\tevent SetPoolInfoCB(address indexed operator, uint256 _pool_id);\\n\\t\\n\\tevent DepositCB(address indexed user, uint256 _pool_id, uint256 _amount);\\n\\tevent WithdrawCB(address indexed user, uint256 _pool_id, uint256 _amount);\\n\\tevent HarvestCB(address indexed user, uint256 _pool_id, uint256 _pending_reward_amount);\\n\\tevent HarvestNotYetCB(address indexed user, uint256 _pool_id, uint256 _pending_reward_amount);\\n\\n\\tevent AddNFTBoosterCB(address indexed user, uint256 _nft_id);\\n\\tevent RemoveNFTBoosterCB(address indexed user, uint256 _nft_id);\\n\\tevent GetNFTBoosterListCB(address indexed user, uint256 _pool_id, uint256[] nft_id_list);\\n\\tevent GetPendingRewardAmountCB(address indexed user, uint256 _pool_id, address _address_user, uint256 _pending_amount);\\n\\t\\n\\tevent EmergencyWithdrawCB(address indexed user, uint256 _pool_id, uint256 _amount);\\n\\tevent HandleStuckCB(address indexed user, uint256 _amount);\\n\\n\\t//---------------------------------------------------------------\\n\\t// Modifier\\n\\t//---------------------------------------------------------------\\n\\tmodifier uniquePool(address _address_lp) { require(is_pool_exist[_address_lp] == false, \\\"uniquePool: duplicated\\\"); _; }\\n\\tmodifier onlyOperator() { require(msg.sender == address_operator, \\\"onlyOperator: Not authorized\\\"); _; }\\n\\n\\t//---------------------------------------------------------------\\n\\t// Variable Interfaces\\n\\t//---------------------------------------------------------------\\n\\tfunction set_chick(address _new_address) external onlyOperator\\n\\t{\\n\\t\\trequire(_new_address != address(0), \\\"set_chick: Wrong address\\\");\\n\\n\\t\\taddress_chick = _new_address;\\n\\t\\tfor(uint256 i=0; i<pool_info.length; i++)\\n\\t\\t{\\n\\t\\t\\tITokenXBaseV3 reward_token = ITokenXBaseV3(pool_info[i].address_reward_token);\\n\\t\\t\\treward_token.set_chick(address_chick);\\n\\t\\t}\\n\\n\\t\\temit SetChickCB(msg.sender, _new_address);\\n\\t}\\n\\n\\tfunction set_cakebaker(address _new_address) external onlyOperator\\n\\t{\\n\\t\\trequire(_new_address != address(0), \\\"set_cakebaker: Wrong address\\\");\\n\\t\\taddress_cakebaker = _new_address;\\n\\t\\t\\n\\t\\temit SetCakeBakerCB(msg.sender, _new_address);\\n\\t}\\n\\n\\tfunction set_operator(address _new_operator) external onlyOperator\\n\\t{\\n\\t\\trequire(_new_operator != address(0), \\\"set_operator: Wrong address\\\");\\n\\t\\taddress_operator = _new_operator;\\n\\t\\temit SetOperatorCB(msg.sender, _new_operator);\\n\\t}\\n\\n\\tfunction set_xnft_address(address _address_xnft) external onlyOperator\\n\\t{\\n\\t\\trequire(_address_xnft != address(0), \\\"set_xnft_address: Wrong address\\\");\\n\\t\\taddress_xnft = _address_xnft;\\n\\t\\temit SetNFTBoosterCB(msg.sender, _address_xnft);\\n\\t}\\n\\n\\tfunction get_pool_count() external view returns(uint256)\\n\\t{\\n\\t\\treturn pool_info.length;\\n\\t}\\n\\n\\tfunction set_deposit_fee(uint256 _pool_id, uint16 _fee_e4) external onlyOperator\\n\\t{\\n\\t\\trequire(_pool_id < pool_info.length, \\\"set_deposit_fee: Wrong pool id.\\\");\\n\\t\\trequire(_fee_e4 <= MAX_DEPOSIT_FEE_E4, \\\"set_deposit_fee: Maximun deposit fee exceeded.\\\");\\n\\n\\t\\tFeeInfo storage cur_fee = fee_info[_pool_id];\\n\\t\\tcur_fee.deposit_e4 = _fee_e4;\\n\\t}\\n\\n\\tfunction set_withdrawal_fee(uint256 _pool_id, uint16 _fee_max_e4, uint16 _fee_min_e4, uint256 _period_sec) external onlyOperator\\n\\t{\\n\\t\\trequire(_pool_id < pool_info.length, \\\"set_withdrawal_fee: Wrong pool id.\\\");\\n\\t\\trequire(_fee_min_e4 >= MIN_WITHDRAWAL_FEE_E4, \\\"set_withdrawal_fee: Minimun fee exceeded.\\\");\\n\\t\\trequire(_fee_max_e4 <= MAX_WITHDRAWAL_FEE_E4, \\\"set_withdrawal_fee: Maximun fee exceeded.\\\");\\n\\t\\trequire(_fee_min_e4 <= _fee_max_e4, \\\"set_withdrawal_fee: Wrong withdrawal fee\\\");\\n\\n\\t\\tFeeInfo storage cur_fee = fee_info[_pool_id];\\n\\t\\tcur_fee.withdrawal_max_e4 = _fee_max_e4;\\n\\t\\tcur_fee.withdrawal_min_e4 = _fee_min_e4;\\n\\t\\tcur_fee.withdrawal_period = _period_sec;\\n\\t}\\n\\n\\tfunction set_alloc_point(uint256 _pool_id, uint256 _alloc_point, bool _update_all) external onlyOperator\\n\\t{\\n\\t\\trequire(_pool_id < pool_info.length, \\\"set_alloc_point: Wrong pool id.\\\");\\n\\n\\t\\tif(_update_all)\\n\\t\\t\\trefresh_reward_per_share();\\n\\n\\t\\tPoolInfo storage pool = pool_info[_pool_id];\\n\\t\\tRewardInfo storage reward = reward_info[pool.address_reward_token];\\n\\n\\t\\treward.total_alloc_point += _alloc_point;\\n\\t\\treward.total_alloc_point -= pool.alloc_point;\\n\\n\\t\\tpool.alloc_point = _alloc_point;\\n\\t}\\n\\n\\tfunction set_emission_per_block(address _address_reward, uint256 _emission_per_block) external onlyOperator\\n\\t{\\n\\t\\trequire(_address_reward != address(0), \\\"set_emission_per_block: Wrong address\\\");\\n\\n\\t\\trefresh_reward_per_share();\\n\\n\\t\\treward_info[_address_reward].emission_per_block = _emission_per_block;\\n\\t\\temit UpdateEmissionRateCB(msg.sender, _emission_per_block);\\n\\t}\\n\\n\\t//---------------------------------------------------------------\\n\\t// External Method\\n\\t//---------------------------------------------------------------\\n\\tconstructor(address _address_chick, address _address_xnft)\\n\\t{\\n\\t\\taddress_operator = msg.sender;\\n\\t\\t\\n\\t\\taddress_chick = _address_chick;\\n\\t\\taddress_xnft = _address_xnft;\\n\\t}\\n\\n\\tfunction make_reward(address _address_reward_token, uint256 _reward_mint_start_block_id, uint256 _emission_per_block) external\\n\\t{\\n\\t\\trequire(_address_reward_token != address(0), \\\"make_pool: Wrong address\\\");\\n\\n\\t\\tRewardInfo storage reward = reward_info[_address_reward_token];\\n\\t\\treward.emission_per_block = _emission_per_block;\\n\\t\\treward.start_block_id = _reward_mint_start_block_id;\\n\\t\\treward.last_rewarded_block_id = (block.number > _reward_mint_start_block_id)?\\n\\t\\t\\tblock.number : _reward_mint_start_block_id;\\n\\n\\t\\tITokenXBaseV3 reward_token = ITokenXBaseV3(_address_reward_token);\\n\\t\\treward_token.set_chick(address_chick);\\n\\t}\\n\\n\\tfunction make_pool(address _address_stake_token, address _address_reward_token, uint256 _alloc_point,\\n\\t\\tuint256 _harvest_interval, bool _refresh_reward)\\n\\t\\tpublic onlyOperator uniquePool(_address_stake_token) returns(uint256)\\n\\t{\\n\\t\\trequire(_address_stake_token != address(0), \\\"make_pool: Wrong address\\\");\\n\\t\\trequire(_address_reward_token != address(0), \\\"make_pool: Wrong address\\\");\\n\\t\\trequire(_harvest_interval <= MAX_HARVEST_INTERVAL, \\\"make_pool: Invalid harvest interval\\\");\\n\\n\\t\\tif(_refresh_reward)\\n\\t\\t\\trefresh_reward_per_share();\\n\\n\\t\\tRewardInfo storage reward = reward_info[_address_reward_token];\\n\\t\\trequire(reward.last_rewarded_block_id != 0, \\\"make_pool: Invalid reward token\\\");\\n\\t\\t\\n\\t\\tis_pool_exist[_address_stake_token] = true;\\n\\n\\t\\treward.total_alloc_point += _alloc_point;\\n\\n\\t\\tpool_info.push(PoolInfo({\\n\\t\\t\\taddress_stake_token: _address_stake_token,\\n\\t\\t\\taddress_reward_token: _address_reward_token,\\n\\n\\t\\t\\tharvest_interval: _harvest_interval,\\n\\t\\t\\talloc_point: _alloc_point,\\n\\t\\t\\ttotal_staked_amount: 0,\\n\\n\\t\\t\\taccu_reward_amount_per_share_e12: 0,\\n\\t\\t\\ttotal_xnft_boost_rate_e4: 0\\n\\t\\t}));\\n\\n\\t\\tfee_info.push(FeeInfo({\\n\\t\\t\\tdeposit_e4: 0,\\n\\t\\t\\twithdrawal_max_e4: 0,\\n\\t\\t\\twithdrawal_min_e4: 0,\\n\\t\\t\\twithdrawal_period: 0\\n\\t\\t}));\\n\\n\\t\\tuint new_pool_id = pool_info.length-1;\\n\\t\\temit MakePoolCB(msg.sender, new_pool_id);\\n\\t\\treturn new_pool_id;\\n\\t}\\n\\n\\tfunction refresh_reward_per_share() public\\n\\t{\\n\\t\\tfor(uint256 i=0; i < pool_info.length; i++)\\n\\t\\t\\t_refresh_reward_per_share(pool_info[i], reward_info[pool_info[i].address_reward_token]);\\n\\t}\\n\\n\\tfunction deposit_nft(uint256 _pool_id, uint256 _xnft_id) public whenNotPaused nonReentrant\\n\\t{\\n\\t\\trequire(_pool_id < pool_info.length, \\\"deposit_nft: Wrong pool id\\\");\\n\\n\\t\\tPoolInfo storage pool = pool_info[_pool_id];\\n\\t\\tRewardInfo storage reward = reward_info[pool.address_reward_token];\\n\\t\\t\\n\\t\\t_refresh_reward_per_share(pool, reward);\\n\\n\\t\\trequire(pool.address_stake_token == address_xnft, \\\"deposit_nft: Wrong pool id for NFT\\\");\\n\\n\\t\\taddress address_user = msg.sender;\\n\\t\\tUserInfo storage user = user_info[_pool_id][address_user];\\n\\n\\t\\trequire(_is_exist_xnft_in_list(user, _xnft_id) == false, \\\"deposit_nft: Already using NFT\\\");\\n\\n\\t\\t_collect_reward(pool, user, address_user);\\n\\n\\t\\t// User -> Bullish\\n\\t\\tIERC1155 stake_token = IERC1155(pool.address_stake_token);\\n\\t\\tstake_token.safeTransferFrom(address_user, address(this), _xnft_id, 1, \\\"\\\");\\n\\n\\t\\t// Write down deposit amount on Bullish's ledger\\n\\t\\tuser.staked_amount += 1;\\n\\t\\t_add_xnft_to_list(user, _xnft_id);\\n\\n\\t\\temit DepositCB(address_user, _pool_id, user.staked_amount);\\n\\t}\\n\\n\\tfunction withdraw_nft(uint256 _pool_id, uint256 _xnft_id) public nonReentrant\\n\\t{\\n\\t\\trequire(_pool_id < pool_info.length, \\\"withdraw_nft: Wrong pool id.\\\");\\n\\n\\t\\tPoolInfo storage pool = pool_info[_pool_id];\\n\\t\\tRewardInfo storage reward = reward_info[pool.address_reward_token];\\n\\t\\t_refresh_reward_per_share(pool, reward);\\n\\n\\t\\trequire(pool.address_stake_token != address_xnft, \\\"withdraw_nft: Wrong pool id\\\");\\n\\n\\t\\taddress address_user = msg.sender;\\n\\t\\tUserInfo storage user = user_info[_pool_id][address_user];\\n\\n\\t\\trequire(_is_exist_xnft_in_list(user, _xnft_id) == true, \\\"withdraw_nft: No NFT found\\\");\\n\\n\\t\\tif(user.next_harvest_time == 0)\\n\\t\\t\\tuser.next_harvest_time = block.timestamp + pool.harvest_interval;\\n\\n\\t\\t_collect_reward(pool, user, address_user);\\n\\n\\t\\t// Bullish -> User\\n\\t\\tIERC1155 stake_token = IERC1155(pool.address_stake_token);\\n\\t\\tstake_token.safeTransferFrom(address(this), address_user, _xnft_id, 1, \\\"\\\");\\n\\n\\t\\tuser.staked_amount -= 1;\\n\\t\\t_remove_xnft_from_list(user, _xnft_id);\\n\\n\\t\\temit WithdrawCB(address_user, _pool_id, user.staked_amount);\\n\\t}\\n\\n\\tfunction deposit(uint256 _pool_id, uint256 _amount) public whenNotPaused nonReentrant\\n\\t{\\n\\t\\trequire(_pool_id < pool_info.length, \\\"deposit: Wrong pool id\\\");\\n\\n\\t\\tPoolInfo storage pool = pool_info[_pool_id];\\n\\t\\tRewardInfo storage reward = reward_info[pool.address_reward_token];\\n\\t\\t_refresh_reward_per_share(pool, reward);\\n\\n\\t\\trequire(pool.address_stake_token != address_xnft, \\\"deposit_nft: Wrong pool id\\\");\\n\\n\\t\\taddress address_user = msg.sender;\\n\\t\\tUserInfo storage user = user_info[_pool_id][address_user];\\n\\n\\t\\t_collect_reward(pool, user, address_user);\\n\\n\\t\\tif(_amount > 0)\\n\\t\\t{\\n\\t\\t\\t// User -> Bullish\\n\\t\\t\\tIERC20 stake_token = IERC20(pool.address_stake_token);\\n\\t\\t\\tstake_token.safeTransferFrom(address_user, address(this), _amount);\\n\\n\\t\\t\\tuint256 deposit_fee = 0;\\n\\t\\t\\tif(fee_info[_pool_id].deposit_e4 > 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\t// Bullish -> Chick for Fee\\n\\t\\t\\t\\tdeposit_fee = _amount * fee_info[_pool_id].deposit_e4 / 1e4;\\n\\t\\t\\t\\tstake_token.safeTransfer(address_chick, deposit_fee);\\t\\t\\t\\t\\n\\t\\t\\t}\\n\\n\\t\\t\\tuint256 deposit_amount = _amount - deposit_fee;\\n\\n\\t\\t\\t// Bullish -> CakeBaker for Deposit to delecate farming\\n\\t\\t\\tif(address_cakebaker != address(0))\\n\\t\\t\\t{\\n\\t\\t\\t\\tICakeBaker cakebaker = ICakeBaker(address_cakebaker);\\n\\t\\t\\t\\tcakebaker.delegate(address(this), pool.address_stake_token, deposit_amount);\\n\\t\\t\\t}\\n\\n\\t\\t\\t// Write down deposit amount on Bullish's ledger\\n\\t\\t\\tuser.staked_amount += deposit_amount;\\n\\t\\t\\tpool.total_staked_amount += deposit_amount;\\n\\t\\t}\\n\\n\\t\\temit DepositCB(address_user, _pool_id, user.staked_amount);\\n\\t}\\n\\n\\tfunction withdraw(uint256 _pool_id, uint256 _amount) public nonReentrant\\n\\t{\\n\\t\\trequire(_pool_id < pool_info.length, \\\"withdraw: Wrong pool id.\\\");\\n\\n\\t\\tPoolInfo storage pool = pool_info[_pool_id];\\n\\t\\tRewardInfo storage reward = reward_info[pool.address_reward_token];\\n\\t\\t_refresh_reward_per_share(pool, reward);\\n\\n\\t\\trequire(pool.address_stake_token != address_xnft, \\\"withdraw: Wrong pool id\\\");\\n\\n\\t\\taddress address_user = msg.sender;\\n\\t\\tUserInfo storage user = user_info[_pool_id][address_user];\\n\\n\\t\\trequire(user.staked_amount >= _amount, \\\"withdraw: user.staked_amount >= _amount\\\");\\n\\n\\t\\tif(user.next_harvest_time == 0)\\n\\t\\t\\tuser.next_harvest_time = block.timestamp + pool.harvest_interval;\\n\\n\\t\\t_collect_reward(pool, user, address_user);\\n\\n\\t\\tif(_amount > 0)\\n\\t\\t{\\n\\t\\t\\t// CakeBaker -> Bullish\\n\\t\\t\\tif(address_cakebaker != address(0))\\n\\t\\t\\t{\\n\\t\\t\\t\\tICakeBaker cakebaker = ICakeBaker(address_cakebaker);\\n\\t\\t\\t\\tcakebaker.retain(address(this), pool.address_stake_token, _amount);\\n\\t\\t\\t}\\n\\n\\t\\t\\tIERC20 stake_token = IERC20(pool.address_stake_token);\\n\\n\\t\\t\\tuint256 withdraw_fee = 0;\\n \\t\\t\\tuint256 withdraw_fee_rate_e4 = _get_cur_withdraw_fee_e4(user, fee_info[_pool_id]);\\n\\t\\t\\tif(withdraw_fee_rate_e4 > 0)\\n\\t\\t\\t{\\n\\t\\t\\t\\t// Bullish -> Chick for Fee\\n\\t\\t\\t\\twithdraw_fee = _amount * withdraw_fee_rate_e4 / 1e4;\\n\\t\\t\\t\\tstake_token.safeTransfer(address_chick, withdraw_fee);\\t\\t\\t\\t\\n\\t\\t\\t}\\n\\n\\t\\t\\tuint256 withdraw_amount = _amount - withdraw_fee;\\n\\n\\t\\t\\tstake_token.safeTransfer(address_user, withdraw_amount);\\n\\n\\t\\t\\tuser.staked_amount -= _amount;\\n\\t\\t\\tpool.total_staked_amount -= withdraw_amount;\\n\\t\\t}\\n\\n\\t\\temit WithdrawCB(address_user, _pool_id, user.staked_amount);\\n\\t}\\n\\n\\tfunction harvest(uint256 _pool_id) public whenNotPaused nonReentrant\\n\\t{\\n\\t\\trequire(_pool_id < pool_info.length, \\\"harvest: Wrong pool id.\\\");\\n\\n\\t\\tPoolInfo storage pool = pool_info[_pool_id];\\n\\t\\tRewardInfo storage reward = reward_info[pool.address_reward_token];\\n\\t\\t_refresh_reward_per_share(pool, reward);\\n\\n\\t\\taddress address_user = msg.sender;\\n\\t\\tUserInfo storage user = user_info[_pool_id][address_user];\\n\\n\\t\\tuint256 pending_reward_amount = _get_pending_reward_amount(pool, reward, user);\\n\\t\\tif(pending_reward_amount == 0)\\n\\t\\t{\\n\\t\\t\\temit HarvestNotYetCB(address_user, _pool_id, pending_reward_amount);\\n\\t\\t}\\t\\t\\n\\t\\telse if(_can_harvest(user))\\n\\t\\t{\\n\\t\\t\\t_collect_reward(pool, user, address_user);\\n\\t\\t\\t_safe_reward_transfer(pool, address_user, pending_reward_amount);\\n\\n\\t\\t\\tuser.locked_reward_amount = 0;\\n\\t\\t\\treward.total_locked_amount -= pending_reward_amount;\\n\\n\\t\\t\\tuser.paid_reward_amount += pending_reward_amount;\\n\\t\\t\\tuser.next_harvest_time = block.timestamp + pool.harvest_interval;\\n\\t\\t\\t\\n\\t\\t\\temit HarvestCB(address_user, _pool_id, pending_reward_amount);\\n\\t\\t}\\n\\t\\telse\\n\\t\\t{\\n\\t\\t\\tuser.locked_reward_amount += pending_reward_amount;\\n\\t\\t\\treward.total_locked_amount += pending_reward_amount;\\n\\n\\t\\t\\temit HarvestNotYetCB(address_user, _pool_id, pending_reward_amount);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction add_nft_booster(uint256 _pool_id, uint256 _nft_id) external whenNotPaused\\n\\t{\\n\\t\\trequire(_pool_id < pool_info.length, \\\"add_nft_booster: Wrong pool id.\\\");\\n\\t\\t\\n\\t\\tPoolInfo storage pool = pool_info[_pool_id];\\n\\t\\tRewardInfo storage reward = reward_info[pool.address_reward_token];\\n\\t\\t_refresh_reward_per_share(pool, reward);\\n\\n\\t\\trequire(pool.address_stake_token != address_xnft, \\\"add_nft_booster: NFT pool doesn't support booster.\\\");\\n\\n\\t\\taddress address_user = msg.sender;\\n\\t\\tUserInfo storage user = user_info[_pool_id][address_user];\\n\\n\\t\\trequire(_is_exist_xnft_in_list(user, _nft_id) == false, \\\"add_nft_booster: Already using nft id\\\");\\n\\n\\t\\t// User -> Bullish\\n\\t\\tIERC1155 stake_token = IERC1155(address_xnft);\\n\\t\\tstake_token.safeTransferFrom(address_user, address(this), _nft_id, 1, \\\"\\\");\\n\\n\\t\\tuint16 grade = _get_nft_grade(_nft_id);\\n\\t\\tuser.xnft_boost_rate_e4 += xnft_boost_rate_e4[grade-1];\\n\\t\\tpool.total_xnft_boost_rate_e4 += xnft_boost_rate_e4[grade-1];\\n\\n\\t\\t_add_xnft_to_list(user, _nft_id);\\n\\n\\t\\temit AddNFTBoosterCB(msg.sender, _nft_id);\\n\\t}\\n\\n\\tfunction remove_nft_booster(uint256 _pool_id, uint256 _nft_id) external\\n\\t{\\n\\t\\trequire(_pool_id < pool_info.length, \\\"remove_nft_booster: Wrong pool id.\\\");\\n\\n\\t\\tPoolInfo storage pool = pool_info[_pool_id];\\n\\t\\tRewardInfo storage reward = reward_info[pool.address_reward_token];\\n\\t\\t_refresh_reward_per_share(pool, reward);\\n\\n\\t\\trequire(pool.address_stake_token != address_xnft, \\\"remove_nft_booster: NFT pool doesn't support booster.\\\");\\n\\n\\t\\taddress address_user = msg.sender;\\n\\t\\tUserInfo storage user = user_info[_pool_id][address_user];\\n\\n\\t\\trequire(_is_exist_xnft_in_list(user, _nft_id) == true, \\\"remove_nft_booster: No NFT found\\\");\\n\\n\\t\\t// Bullish -> User\\n\\t\\tIERC1155 stake_token = IERC1155(address_xnft);\\n\\t\\tstake_token.safeTransferFrom(address(this), address_user, _nft_id, 1, \\\"\\\");\\n\\n\\t\\tuint16 grade = _get_nft_grade(_nft_id);\\n\\t\\tuser.xnft_boost_rate_e4 -= xnft_boost_rate_e4[grade-1];\\n\\t\\tpool.total_xnft_boost_rate_e4 -= xnft_boost_rate_e4[grade-1];\\n\\n\\t\\t_remove_xnft_from_list(user, _nft_id);\\n\\n\\t\\temit RemoveNFTBoosterCB(msg.sender, _nft_id);\\n\\t}\\n\\n\\tfunction get_nft_booster_list(uint256 _pool_id) external returns(uint256[] memory)\\n\\t{\\n\\t\\taddress address_user = msg.sender;\\n\\t\\tuint256[] memory id_list = user_info[_pool_id][address_user].xnft_id_list;\\n\\t\\temit GetNFTBoosterListCB(msg.sender, _pool_id, id_list);\\n\\t\\treturn id_list;\\n\\t}\\n\\n\\tfunction has_nft(address _address_user) external view returns(bool)\\n\\t{\\n\\t\\tif(_address_user == address(0))\\n\\t\\t\\treturn false;\\n\\t\\t\\t\\n\\t\\tfor(uint256 i=0; i<pool_info.length; i++)\\n\\t\\t{\\n\\t\\t\\tUserInfo storage user = user_info[i][_address_user];\\n\\t\\t\\tif(user.xnft_id_list.length > 0)\\n\\t\\t\\t\\treturn true;\\n\\t\\t}\\n\\n\\t\\treturn false;\\n\\t}\\n\\n\\tfunction get_pending_reward_amount(uint256 _pool_id, address _address_user) external returns(uint256)\\n\\t{\\n\\t\\trequire(_pool_id < pool_info.length, \\\"get_pending_reward_amount: Wrong pool id.\\\");\\n\\n\\t\\tPoolInfo storage pool = pool_info[_pool_id];\\n\\t\\tUserInfo storage user = user_info[_pool_id][_address_user];\\n\\t\\tRewardInfo storage reward = reward_info[pool.address_reward_token];\\n\\n\\t\\tuint256 pending_amount = _get_pending_reward_amount(pool, reward, user);\\n\\n\\t\\temit GetPendingRewardAmountCB(msg.sender, _pool_id, _address_user, pending_amount);\\n\\t\\treturn pending_amount;\\n\\t}\\n\\n\\tfunction emergency_withdraw(uint256 _pool_id) public nonReentrant\\n\\t{\\n\\t\\trequire(_pool_id < pool_info.length, \\\"emergency_withdraw: Wrong pool id.\\\");\\n\\n\\t\\taddress address_user = msg.sender;\\n\\t\\tPoolInfo storage pool = pool_info[_pool_id];\\n\\n\\t\\trequire(pool.address_stake_token != address_xnft, \\\"emergency_withdraw: NFT pool doesn't support.\\\");\\n\\n\\t\\tUserInfo storage user = user_info[_pool_id][address_user];\\n\\n\\t\\tuint256 amount = user.staked_amount;\\n\\t\\tuser.staked_amount = 0;\\n\\t\\tuser.paid_reward_amount = 0;\\n\\n\\t\\tIERC20 stake_token = IERC20(pool.address_stake_token);\\n\\t\\tstake_token.safeTransfer(address_user, amount);\\n\\n\\t\\temit EmergencyWithdrawCB(address_user, _pool_id, amount);\\n\\t}\\n\\n\\tfunction handle_stuck(address _address_token, uint256 _amount) public onlyOperator nonReentrant\\n\\t{\\n\\t\\trequire(_address_token != address_xnft, \\\"handle_stuck: NFT pool doesn't support.\\\");\\n\\t\\t\\n\\t\\tfor(uint16 i=0; i<pool_info.length; i++)\\n\\t\\t\\trequire(_address_token != pool_info[i].address_reward_token, \\\"handle_stuck: Wrong token address\\\");\\n\\n\\t\\taddress address_user = msg.sender;\\n\\n\\t\\tIERC20 stake_token = IERC20(_address_token);\\n\\t\\tstake_token.safeTransfer(address_user, _amount);\\n\\t\\t\\n\\t\\temit HandleStuckCB(address_user, _amount);\\n\\t}\\n\\n\\tfunction pause() external onlyOperator\\n\\t{ \\n\\t\\t_pause(); \\n\\t\\temit PauseCB(msg.sender);\\n\\t}\\n\\t\\n\\tfunction resume() external onlyOperator\\n\\t{ \\n\\t\\t_unpause();\\n\\t\\temit ResumeCB(msg.sender);\\n\\t}\\n\\n\\t//---------------------------------------------------------------\\n\\t// Internal Method\\n\\t//---------------------------------------------------------------\\n\\tfunction _can_harvest(UserInfo storage user) private view returns(bool)\\n\\t{\\n\\t\\treturn block.timestamp >= user.next_harvest_time;\\n\\t}\\n\\n\\tfunction _safe_reward_transfer(PoolInfo storage _pool, address _to, uint256 _amount) internal\\n\\t{\\n\\t\\tIERC20 reward_token = IERC20(_pool.address_reward_token);\\n\\t\\tuint256 cur_reward_balance = reward_token.balanceOf(address(this));\\n\\n\\t\\tif(_amount > cur_reward_balance)\\n\\t\\t\\treward_token.safeTransfer(_to, cur_reward_balance);\\n\\t\\telse\\n\\t\\t\\treward_token.safeTransfer(_to, _amount);\\n\\t}\\n\\n\\tfunction _collect_reward(PoolInfo storage _pool, UserInfo storage _user, address _adress_user) private returns(uint256)\\n\\t{\\n\\t\\tif(_user.staked_amount == 0)\\n\\t\\t\\treturn 0;\\n\\t\\t\\n\\t\\tuint256 user_share = _user.staked_amount * _user.xnft_boost_rate_e4 / 1e4;\\n\\t\\tuint256 accu_reward_amount = user_share * _pool.accu_reward_amount_per_share_e12 / 1e12;\\n\\t\\t\\n\\t\\tuint256 pending_reward_amount = accu_reward_amount - _user.paid_reward_amount;\\n\\t\\tif(pending_reward_amount > 0)\\n\\t\\t{\\n\\t\\t\\t_safe_reward_transfer(_pool, _adress_user, pending_reward_amount);\\n\\t\\t\\t_user.paid_reward_amount = accu_reward_amount;\\n\\t\\t}\\n\\n\\t\\treturn pending_reward_amount;\\n\\t}\\n\\n\\tfunction _get_pending_reward_amount(PoolInfo storage _pool, RewardInfo storage _reward, UserInfo storage _user) internal returns(uint256)\\n\\t{\\n\\t\\tuint256 elapsed_block_count = block.number - _reward.last_rewarded_block_id;\\n\\t\\tif(elapsed_block_count == 0)\\n\\t\\t\\treturn 0;\\n\\n\\t\\t_refresh_reward_per_share(_pool, _reward);\\n\\t\\t\\n\\t\\tuint256 accu_rps_e12 = _pool.accu_reward_amount_per_share_e12;\\n\\t\\tif(_pool.total_staked_amount > 0 && _pool.alloc_point > 0 && elapsed_block_count > 0)\\n\\t\\t{\\n\\t\\t\\tuint256 new_reward_per_pool = _get_new_rewards_amount(_pool, _reward, elapsed_block_count);\\n\\t\\t\\taccu_rps_e12 += new_reward_per_pool * 1e12 / _pool.total_staked_amount;\\n\\t\\t}\\n\\n\\t\\tuint256 user_boosted_amount_e16 = accu_rps_e12 * _user.staked_amount * \\n\\t\\t\\t(10000 + _user.xnft_boost_rate_e4) / _pool.total_staked_amount;\\n\\n\\t\\tuint256 pending_total = user_boosted_amount_e16 / 1e16 - _user.paid_reward_amount;\\n\\t\\treturn pending_total;\\n\\t}\\n\\n\\tfunction _get_new_rewards_amount(PoolInfo storage _pool, RewardInfo storage _reward, uint256 _block_count) internal view returns(uint256)\\n\\t{\\n\\t\\tuint256 new_reward_per_pool = _block_count * _reward.emission_per_block * _pool.alloc_point / _reward.total_alloc_point;\\n\\t\\treturn new_reward_per_pool;\\n\\t}\\n\\n\\tfunction _refresh_reward_per_share(PoolInfo storage _pool, RewardInfo storage _reward) internal\\n\\t{\\t\\t\\n\\t\\tuint256 elapsed_block_count = block.number - _reward.last_rewarded_block_id;\\n\\t\\tif(_pool.total_staked_amount == 0 || _pool.alloc_point == 0 || elapsed_block_count == 0)\\n\\t\\t\\treturn;\\n\\n\\t\\tuint256 mint_reward_amount = _get_new_rewards_amount(_pool, _reward, elapsed_block_count);\\n\\n\\t\\t// add more rewards for the nft boosters\\n\\t\\tmint_reward_amount += (mint_reward_amount * (10000 + _pool.total_xnft_boost_rate_e4) / 1e4);\\n\\n\\t\\t// Mint native token -> Bullish\\n\\t\\tITokenXBaseV3 reward_token = ITokenXBaseV3(_pool.address_reward_token);\\n\\t\\treward_token.mint(address(this), mint_reward_amount);\\n\\n\\t\\t_pool.accu_reward_amount_per_share_e12 += (mint_reward_amount * 1e12 / _pool.total_staked_amount);\\n\\t\\t_reward.last_rewarded_block_id = block.number;\\n\\t}\\n\\n\\tfunction _get_nft_grade(uint256 _xnft_id) internal view returns(uint16)\\n\\t{\\n\\t\\trequire(_xnft_id > xnft_level_prefix[0], \\\"get_grade: Wrong ID\\\");\\n\\n\\t\\tif(_xnft_id < xnft_level_prefix[1]) return 1;\\n\\t\\telse if(_xnft_id < xnft_level_prefix[2]) return 2;\\n\\t\\telse return 3;\\n\\t}\\n\\n\\tfunction _is_exist_xnft_in_list(UserInfo storage _user, uint256 _nft_id) view internal returns(bool)\\n\\t{\\n\\t\\tbool check_ownership = false;\\n\\t\\tfor(uint256 i=0; i < _user.xnft_id_list.length; i++)\\n\\t\\t{\\n\\t\\t\\tif(_user.xnft_id_list[i] == _nft_id)\\n\\t\\t\\t\\tcheck_ownership = true;\\n\\t\\t}\\n\\n\\t\\treturn check_ownership;\\n\\t}\\n\\n\\tfunction _add_xnft_to_list(UserInfo storage user, uint256 _nft_id) internal\\n\\t{\\n\\t\\tfor(uint256 i=0; i<user.xnft_id_list.length; i++)\\n\\t\\t\\trequire(user.xnft_id_list[i] != _nft_id, \\\"add_nft_booster: Already using nft id\\\");\\n\\n\\t\\tuser.xnft_id_list.push(_nft_id);\\n\\t}\\n\\n\\tfunction _remove_xnft_from_list(UserInfo storage user, uint256 _nft_id) internal\\n\\t{\\n\\t\\tfor(uint256 i=0; i<user.xnft_id_list.length; i++)\\n\\t\\t{\\n\\t\\t\\tif(user.xnft_id_list[i] == _nft_id)\\n\\t\\t\\t{\\n\\t\\t\\t\\tuser.xnft_id_list[i] = user.xnft_id_list[user.xnft_id_list.length-1];\\n\\t\\t\\t\\tuser.xnft_id_list.pop();\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _min(uint256 a, uint256 b) internal pure returns (uint256)\\n\\t{\\n    \\treturn a <= b ? a : b;\\n\\t}\\n\\t\\n\\tfunction _get_cur_withdraw_fee_e4(UserInfo storage _user, FeeInfo storage _fee) internal view returns(uint256)\\n\\t{\\n\\t\\tuint256 time_diff = block.timestamp - _user.last_deposit_time;\\n\\t\\tuint256 reduction_rate_e4 = _min(time_diff * 1e4 / _fee.withdrawal_period, 10000);\\n\\t\\tuint256 final_fee_e4 = _fee.withdrawal_min_e4 + (_fee.withdrawal_max_e4-_fee.withdrawal_min_e4) * reduction_rate_e4 / 1e4;\\n\\t\\treturn final_fee_e4;\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/BullishDrill.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >= 0.8.17;\\n\\n//---------------------------------------------------------\\n// Imports\\n//---------------------------------------------------------\\nimport \\\"./Bullish.sol\\\";\\n\\n//---------------------------------------------------------\\n// Contract\\n//---------------------------------------------------------\\ncontract BullishDrill is Bullish\\n{\\n\\tconstructor(address _address_chick, address _address_xnft) Bullish(_address_chick, _address_xnft)\\n\\t{\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICakeBaker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.8.17;\\n\\n//---------------------------------------------------------\\n// Interface\\n//---------------------------------------------------------\\ninterface ICakeBaker\\n{\\n\\tfunction set_address_reward_vault(address _new_address) external;\\n\\tfunction set_operator(address _new_address) external;\\n\\tfunction set_controller(address _new_address) external;\\n\\tfunction set_pancake_masterchef(address _new_address) external;\\n\\tfunction add_pancake_farm(uint256 _pool_id, address _address_lp, address _address_reward_token) external returns(uint256);\\n\\tfunction delegate(address _address_lp_vault, address _address_lp, uint256 _amount) external returns(uint256);\\n\\tfunction retain(address _address_lp_vault, address _address_lp, uint256 _amount) external returns(uint256);\\n\\tfunction harvest() external;\\n\\tfunction pause() external;\\n\\tfunction resume() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenXBaseV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.8.17;\\n\\n//---------------------------------------------------------\\n// Interface\\n//---------------------------------------------------------\\ninterface ITokenXBaseV3\\n{\\n\\tfunction set_chick(address _new_chick) external;\\n\\tfunction toggle_block_send(address[] memory _accounts, bool _is_blocked) external;\\n\\tfunction toggle_block_recv(address[] memory _accounts, bool _is_blocked) external;\\n\\tfunction set_chick_work(bool _is_work) external;\\n\\tfunction mint(address _to, uint256 _amount) external;\\n\\tfunction burn(uint256 _amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address_chick\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address_xnft\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nft_id\",\"type\":\"uint256\"}],\"name\":\"AddNFTBoosterCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"DepositCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdrawCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"nft_id_list\",\"type\":\"uint256[]\"}],\"name\":\"GetNFTBoosterListCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pending_amount\",\"type\":\"uint256\"}],\"name\":\"GetPendingRewardAmountCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"HandleStuckCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pending_reward_amount\",\"type\":\"uint256\"}],\"name\":\"HarvestCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pending_reward_amount\",\"type\":\"uint256\"}],\"name\":\"HarvestNotYetCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_pool_id\",\"type\":\"uint256\"}],\"name\":\"MakePoolCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"PauseCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nft_id\",\"type\":\"uint256\"}],\"name\":\"RemoveNFTBoosterCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ResumeCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"SetCakeBakerCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"SetChickCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address_xnft\",\"type\":\"address\"}],\"name\":\"SetNFTBoosterCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_new_operator\",\"type\":\"address\"}],\"name\":\"SetOperatorCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"}],\"name\":\"SetPoolInfoCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward_per_block\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRateCB\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCB\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_FEE_E4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_HARVEST_INTERVAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_WITHDRAWAL_FEE_E4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_WITHDRAWAL_FEE_E4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nft_id\",\"type\":\"uint256\"}],\"name\":\"add_nft_booster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"address_cakebaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"address_chick\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"address_operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"address_xnft\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xnft_id\",\"type\":\"uint256\"}],\"name\":\"deposit_nft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"}],\"name\":\"emergency_withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fee_info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit_e4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawal_max_e4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawal_min_e4\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawal_period\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"}],\"name\":\"get_nft_booster_list\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address_user\",\"type\":\"address\"}],\"name\":\"get_pending_reward_amount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get_pool_count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"handle_stuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address_user\",\"type\":\"address\"}],\"name\":\"has_nft\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"is_pool_exist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address_stake_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_address_reward_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_alloc_point\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvest_interval\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_refresh_reward\",\"type\":\"bool\"}],\"name\":\"make_pool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address_reward_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_reward_mint_start_block_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_emission_per_block\",\"type\":\"uint256\"}],\"name\":\"make_reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pool_info\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"address_stake_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"address_reward_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"harvest_interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"alloc_point\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_staked_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accu_reward_amount_per_share_e12\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_xnft_boost_rate_e4\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refresh_reward_per_share\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nft_id\",\"type\":\"uint256\"}],\"name\":\"remove_nft_booster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resume\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"reward_info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start_block_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_rewarded_block_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"emission_per_block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_alloc_point\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total_locked_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_alloc_point\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_update_all\",\"type\":\"bool\"}],\"name\":\"set_alloc_point\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_address\",\"type\":\"address\"}],\"name\":\"set_cakebaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_address\",\"type\":\"address\"}],\"name\":\"set_chick\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_fee_e4\",\"type\":\"uint16\"}],\"name\":\"set_deposit_fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address_reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_emission_per_block\",\"type\":\"uint256\"}],\"name\":\"set_emission_per_block\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_new_operator\",\"type\":\"address\"}],\"name\":\"set_operator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_fee_max_e4\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_fee_min_e4\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_period_sec\",\"type\":\"uint256\"}],\"name\":\"set_withdrawal_fee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address_xnft\",\"type\":\"address\"}],\"name\":\"set_xnft_address\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_info\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"staked_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid_reward_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"locked_reward_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"last_deposit_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"next_harvest_time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xnft_boost_rate_e4\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pool_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xnft_id\",\"type\":\"uint256\"}],\"name\":\"withdraw_nft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"BullishDrill","CompilerVersion":"v0.8.17+commit.8df45f5f","OptimizationUsed":"1","Runs":"2000","ConstructorArguments":"000000000000000000000000492cdc807581abb94c10cfb8a2591babedb81f9f000000000000000000000000771db43f1277314bbb1f23d852c7ff9a9927a8a3","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}