{"status":"1","message":"OK","result":[{"SourceCode":"{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Office.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\nimport \\\"./DateTime.sol\\\";\\n\\ncontract Context {\\n    // Empty internal constructor, to prevent people from mistakenly deploying\\n    // an instance of this contract, which should be used via inheritance.\\n    constructor () { }\\n\\n    function _msgSender() internal view returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address payable) {\\n        return payable(_owner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public onlyOwner {\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     */\\n    function _transferOwnership(address newOwner) internal {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\\ncontract Office is Context, Ownable, DateTime {\\n    using SafeMath for uint256;\\n    using SafeMath for uint16;\\n\\n    event REGISTRATION(address user, address parent);\\n    event WITHDRAW_REF(address user, uint256 amount);\\n    event WITHDRAW_BODY(address user, uint256 amount);\\n    event WITHDRAW_INCOME(address user, uint256 amount);\\n    event REINVEST(address user, uint256 amount);\\n    event INVEST(address user, uint256 amount);\\n    event START_WORK(address user);\\n\\n    uint256 public DIVISOR = 1000;\\n\\n    uint public withdrawCommission;\\n\\n    uint public firstLineReferralPercent = 8;\\n    uint public secondLineReferralPercent = 6;\\n    uint public thirdLineReferralPercent = 3;\\n    uint public fourthLineReferralPercent = 2;\\n    uint public fifthLineReferralPercent = 1;\\n\\n    uint256 public countUsers;\\n    uint256 public countInvest;\\n\\n    bool public initialized = false;\\n\\n    address payable public ceoAddress;\\n\\n    struct LineInfo {\\n        uint256 usersCount;\\n        uint256 investAmount;\\n    }\\n\\n    mapping (address => Worker) public users;\\n    mapping (address => uint256) public totalDeposit;\\n\\n    struct Worker {\\n        uint16 level;\\n        uint256 claimDate;\\n        uint256 timeZone;\\n        uint256 refAmount;\\n        uint256 balance;\\n        uint16 percent;\\n        address parent;\\n        uint256 activateTime;\\n        uint256 currentBalance;\\n        uint256 totalIncome;\\n        uint256 totalRefAmount;\\n        uint256 lastStart;\\n        uint256 lastEnd;\\n        LineInfo[6] lineInformation;\\n        uint256 teamIncome;\\n    }\\n\\n    constructor() {\\n        ceoAddress = payable(msg.sender);\\n        withdrawCommission = 5;\\n        countUsers = 0;\\n    }\\n\\n    function getOwner() external view returns (address payable) {\\n        return owner();\\n    }\\n\\n    function init() public onlyOwner {\\n        users[owner()].activateTime = block.timestamp;\\n        users[owner()].parent = owner();\\n        users[owner()].level = 1;\\n        users[owner()].percent = 60;\\n        users[owner()].claimDate = block.timestamp;\\n        users[owner()].timeZone = 3 * 3600;\\n        initialized = true;\\n    }\\n\\n    function getLineInformation(address _user, uint8 _level) public view returns(LineInfo memory) {\\n        Worker memory user = users[_user];\\n        return user.lineInformation[_level];\\n    }\\n\\n    function getCeoCommission(uint256 _amount) private view returns(uint256) {\\n        return _amount.mul(withdrawCommission).div(100);\\n    }\\n\\n    function getParent(address _user) public view returns (address) {\\n        address parent = users[_user].parent;\\n        return parent;\\n    }\\n\\n    function setCeoAddress(address newCeoAddress) public onlyOwner {\\n        require(newCeoAddress != address(0), \\\"newCeoAddress: new ceo address is the zero address\\\");\\n        ceoAddress = payable(newCeoAddress);\\n    }\\n\\n    function setWithdrawCommissionPercent(uint _newCommission) public onlyOwner {\\n        require(_newCommission >= 0, 'Commission should be more then or equal 0');\\n        require(_newCommission <= 30, 'Commission should be less then or equal 30');\\n        withdrawCommission = _newCommission;\\n    }\\n\\n    function getWorker() public view returns(Worker memory) {\\n        return users[msg.sender];\\n    }\\n\\n    function activateUser(uint256 _time, address _parent) public {\\n        address _user = msg.sender;\\n        require(users[_user].activateTime == 0, 'User has been activated');\\n        require(users[_parent].activateTime > 0, 'Error parent');\\n        require(_parent != _user, 'User equal parent');\\n        uint256 _now = block.timestamp;\\n        users[_user].level = 1;\\n        users[_user].claimDate = _now;\\n        users[_user].timeZone = _time;\\n        users[_user].percent = 60;\\n        users[_user].parent = _parent;\\n        users[_user].activateTime = _now;\\n\\n        addUsersToStructure(_parent);\\n        countUsers = countUsers + 1;\\n        emit REGISTRATION(_user, _parent);\\n    }\\n\\n    function addUsersToStructure(address _parent) private {\\n        users[_parent].lineInformation[1].usersCount = users[_parent].lineInformation[1].usersCount + 1;\\n\\n        if(_parent == owner()) return;\\n        address _newParent = users[_parent].parent;\\n        users[_newParent].lineInformation[2].usersCount = users[_newParent].lineInformation[2].usersCount + 1;\\n\\n        if(_newParent == owner()) return;\\n        _newParent = users[_newParent].parent;\\n        users[_newParent].lineInformation[3].usersCount = users[_newParent].lineInformation[3].usersCount + 1;\\n\\n        if(_newParent == owner()) return;\\n        _newParent = users[_newParent].parent;\\n        users[_newParent].lineInformation[4].usersCount = users[_newParent].lineInformation[4].usersCount + 1;\\n\\n        if(_newParent == owner()) return;\\n        _newParent = users[_newParent].parent;\\n        users[_newParent].lineInformation[5].usersCount = users[_newParent].lineInformation[5].usersCount + 1;\\n    }\\n\\n    function addTeamIncomeToStructure(address _parent, uint256 _amount) private {\\n        users[_parent].teamIncome = users[_parent].teamIncome + _amount;\\n\\n        if(_parent == owner()) return;\\n        address _newParent = users[_parent].parent;\\n        users[_newParent].teamIncome = users[_newParent].teamIncome + _amount;\\n\\n        if(_newParent == owner()) return;\\n        _newParent = users[_newParent].parent;\\n        users[_newParent].teamIncome = users[_newParent].teamIncome + _amount;\\n\\n        if(_newParent == owner()) return;\\n        _newParent = users[_newParent].parent;\\n        users[_newParent].teamIncome = users[_newParent].teamIncome + _amount;\\n\\n        if(_newParent == owner()) return;\\n        _newParent = users[_newParent].parent;\\n        users[_newParent].teamIncome = users[_newParent].teamIncome + _amount;\\n    }\\n\\n    function addInvestToStructure(address _parent, uint256 _amount) private {\\n        users[_parent].lineInformation[1].investAmount = users[_parent].lineInformation[1].investAmount + _amount;\\n\\n        if(_parent == owner()) return;\\n        address _newParent = users[_parent].parent;\\n        users[_newParent].lineInformation[2].investAmount = users[_newParent].lineInformation[2].investAmount + _amount;\\n\\n        if(_newParent == owner()) return;\\n        _newParent = users[_newParent].parent;\\n        users[_newParent].lineInformation[3].investAmount = users[_newParent].lineInformation[3].investAmount + _amount;\\n\\n        if(_newParent == owner()) return;\\n        _newParent = users[_newParent].parent;\\n        users[_newParent].lineInformation[4].investAmount = users[_newParent].lineInformation[4].investAmount + _amount;\\n\\n        if(_newParent == owner()) return;\\n        _newParent = users[_newParent].parent;\\n        users[_newParent].lineInformation[5].investAmount = users[_newParent].lineInformation[5].investAmount + _amount;\\n    }\\n\\n    function invest() public payable {\\n        address _user = msg.sender;\\n        uint256 _amount = msg.value;\\n        require(users[_user].activateTime > 0, 'User not active');\\n        users[_user].balance = (users[_user].balance).add(getAmountAfterChargeCommission(_amount));\\n        addInvestToStructure(users[_user].parent, _amount);\\n        createReferralIncome(users[_user].parent, _amount);\\n        countInvest = countInvest + _amount;\\n\\n        emit INVEST(_user, _amount);\\n    }\\n\\n    function canStart(address _user) public view returns(bool) {\\n        require(users[_user].activateTime > 0, 'User not active');\\n        uint256 _now = block.timestamp;\\n        uint256 _userTime = _now + users[_user].timeZone;\\n        if (_userTime < users[_user].lastEnd) return false;\\n        if (users[_user].balance == 0) return false;\\n        uint256 _hour = DateTime.getHour(_userTime);\\n        if (_hour < 9 || _hour >= 18) return false;\\n        return true;\\n    }\\n\\n    function getLoops(address _user) public view returns(uint256) {\\n        uint256 _now = block.timestamp + users[_user].timeZone;\\n        return DateTime.getHour(_now);\\n    }\\n\\n    function canWithdraw(address _user) public view returns(bool) {\\n        require(users[_user].activateTime > 0, 'User not active');\\n        uint256 _now = block.timestamp;\\n        uint256 _userTime = _now + users[_user].timeZone;\\n        uint256 _hour = DateTime.getHour(_userTime);\\n        if (_hour < 9 || _hour >= 18) return true;\\n        return false;\\n    }\\n\\n    function startWork() public {\\n        address _user = msg.sender;\\n        uint256 _now = block.timestamp + users[_user].timeZone;\\n        require(canStart(_user), 'Cant start now');\\n        require(!canWithdraw(_user), 'Cant start now');\\n        require(users[_user].lastEnd < _now, 'Error time');\\n//        updatePercent(_user);\\n        uint16 _cYear = DateTime.getYear(_now);\\n        uint8 _cMonth = DateTime.getMonth(_now);\\n        uint8 _cDay = DateTime.getDay(_now);\\n\\n        uint256 _finishTime = DateTime.toTimestamp(_cYear, _cMonth, _cDay, 18, 0, 0);\\n        uint256 _startTime = _finishTime - 28800;\\n        uint256 time;\\n        uint256 amount;\\n        if (_now > _startTime) {\\n            time = _now;\\n            amount = users[_user].balance.mul(users[_user].percent).div(DIVISOR);\\n            amount = amount / 28800 * (_finishTime - time);\\n        } else {\\n            time = _startTime;\\n            amount = users[_user].balance.mul(users[_user].percent).div(DIVISOR);\\n        }\\n        users[_user].lastStart = time;\\n        users[_user].lastEnd = _finishTime;\\n        users[_user].currentBalance = users[_user].currentBalance + amount;\\n        users[_user].totalIncome = users[_user].totalIncome + amount;\\n        addTeamIncomeToStructure(users[_user].parent, amount);\\n        checkBurnRule(_user);\\n\\n        emit START_WORK(_user);\\n    }\\n\\n    function checkBurnRule(address _user) private {\\n        uint256 _totalIncome = users[_user].totalIncome + users[_user].totalRefAmount;\\n        if (_totalIncome >= 2 * users[_user].balance) {\\n            users[_user].balance = 0;\\n            users[_user].totalIncome = 0;\\n            users[_user].totalRefAmount = 0;\\n        }\\n    }\\n\\n    function reinvest() public {\\n        address _user = msg.sender;\\n        require(canWithdraw(_user), 'Cant start now');\\n        uint256 _amount = users[_user].currentBalance;\\n        users[_user].currentBalance = 0;\\n        if (users[_user].totalIncome > _amount) {\\n            users[_user].totalIncome = users[_user].totalIncome - _amount;\\n        } else {\\n            users[_user].totalIncome = 0;\\n        }\\n        users[_user].balance = (users[_user].balance).add(getAmountAfterChargeCommission(_amount));\\n        addInvestToStructure(users[_user].parent, _amount);\\n        createReferralIncome(users[_user].parent, _amount);\\n\\n        countInvest = countInvest + _amount;\\n        emit REINVEST(_user, _amount);\\n    }\\n\\n    function reinvestRef() public {\\n        address _user = msg.sender;\\n        require(canWithdraw(_user), 'Cant start now');\\n        uint256 _amount = users[_user].refAmount;\\n        users[_user].refAmount = 0;\\n        if (users[_user].totalRefAmount > _amount) {\\n            users[_user].totalRefAmount = users[_user].totalRefAmount - _amount;\\n        } else {\\n            users[_user].totalRefAmount = 0;\\n        }\\n        users[_user].balance = (users[_user].balance).add(getAmountAfterChargeCommission(_amount));\\n        addInvestToStructure(users[_user].parent, _amount);\\n        createReferralIncome(users[_user].parent, _amount);\\n\\n        countInvest = countInvest + _amount;\\n        emit REINVEST(_user, _amount);\\n    }\\n\\n//    function updatePercent(address _user) private {\\n//        uint256 _balance = users[_user].balance;\\n//        if (_balance <= 5 * 1 ether) {\\n//            users[_user].level = 1;\\n//            users[_user].percent = 25;\\n//            return;\\n//        } else if (_balance <= 15 * 1 ether) {\\n//            users[_user].level = 2;\\n//            users[_user].percent = 40;\\n//            return;\\n//        } else {\\n//            users[_user].level = 3;\\n//            users[_user].percent = 60;\\n//            return;\\n//        }\\n//    }\\n\\n    function getAmountAfterChargeCommission(uint256 _amount) private view returns(uint256) {\\n        uint256 _percent = firstLineReferralPercent\\n        .add(secondLineReferralPercent)\\n        .add(thirdLineReferralPercent)\\n        .add(fourthLineReferralPercent)\\n        .add(fifthLineReferralPercent);\\n        return _amount.mul(100 - _percent).div(100);\\n    }\\n\\n    function makeRefIncome(address toUser, uint256 amount, uint256 percent) private {\\n        uint256 toUserAmount = (users[toUser].balance).mul(percent).div(100);\\n        if (amount > toUserAmount) {\\n            users[owner()].refAmount = users[owner()].refAmount + (amount - toUserAmount);\\n            users[owner()].totalRefAmount = users[owner()].totalRefAmount + (amount - toUserAmount);\\n            amount = toUserAmount;\\n        }\\n        users[toUser].totalRefAmount = users[toUser].totalRefAmount + amount;\\n        users[toUser].refAmount = users[toUser].refAmount + amount;\\n    }\\n\\n    function createReferralIncome(address parent, uint256 amount) private {\\n        address currentParent = parent;\\n        makeRefIncome(currentParent, amount.mul(firstLineReferralPercent).div(100), firstLineReferralPercent);\\n\\n        currentParent = users[currentParent].parent;\\n        makeRefIncome(currentParent, amount.mul(secondLineReferralPercent).div(100), secondLineReferralPercent);\\n\\n        currentParent = users[currentParent].parent;\\n        makeRefIncome(currentParent, amount.mul(thirdLineReferralPercent).div(100), thirdLineReferralPercent);\\n\\n        currentParent = users[currentParent].parent;\\n        makeRefIncome(currentParent, amount.mul(fourthLineReferralPercent).div(100), fourthLineReferralPercent);\\n\\n        currentParent = users[currentParent].parent;\\n        makeRefIncome(currentParent, amount.mul(fifthLineReferralPercent).div(100), fifthLineReferralPercent);\\n    }\\n\\n    function withdraw() public {\\n        require(canWithdraw(msg.sender), 'Error time');\\n        address payable user = payable(msg.sender);\\n\\n        uint256 amountOnContract = address(this).balance;\\n        uint256 amountToWithdraw = min(users[user].currentBalance, amountOnContract);\\n\\n        users[user].currentBalance = 0;\\n\\n        uint256 fee = amountToWithdraw.mul(withdrawCommission).div(100);\\n        owner().transfer(fee);\\n        user.transfer(amountToWithdraw.sub(fee));\\n\\n        emit WITHDRAW_INCOME(user, amountToWithdraw.sub(fee));\\n    }\\n\\n    function withdrawRef() public {\\n        address payable user = payable(msg.sender);\\n\\n        uint256 amountOnContract = address(this).balance;\\n        uint256 refAmount = users[user].refAmount;\\n        users[user].refAmount = 0;\\n        uint256 amountToWithdraw = min(amountOnContract, refAmount);\\n\\n        uint256 fee = amountToWithdraw.mul(withdrawCommission).div(100);\\n        owner().transfer(fee);\\n        user.transfer(amountToWithdraw.sub(fee));\\n\\n        emit WITHDRAW_REF(user, amountToWithdraw.sub(fee));\\n    }\\n\\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\"\r\n    },\r\n    \"contracts/DateTime.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.15;\\n\\ncontract DateTime {\\n    /*\\n     *  Date and Time utilities for ethereum contracts\\n     *\\n     */\\n    struct _DateTime {\\n        uint16 year;\\n        uint8 month;\\n        uint8 day;\\n        uint8 hour;\\n        uint8 minute;\\n        uint8 second;\\n        uint8 weekday;\\n    }\\n\\n    uint constant DAY_IN_SECONDS = 86400;\\n    uint constant YEAR_IN_SECONDS = 31536000;\\n    uint constant LEAP_YEAR_IN_SECONDS = 31622400;\\n\\n    uint constant HOUR_IN_SECONDS = 3600;\\n    uint constant MINUTE_IN_SECONDS = 60;\\n\\n    uint16 constant ORIGIN_YEAR = 1970;\\n\\n    function isLeapYear(uint16 year) public pure returns (bool) {\\n        if (year % 4 != 0) {\\n            return false;\\n        }\\n        if (year % 100 != 0) {\\n            return true;\\n        }\\n        if (year % 400 != 0) {\\n            return false;\\n        }\\n        return true;\\n    }\\n\\n    function leapYearsBefore(uint year) public pure returns (uint) {\\n        year -= 1;\\n        return year / 4 - year / 100 + year / 400;\\n    }\\n\\n    function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\\n            return 31;\\n        }\\n        else if (month == 4 || month == 6 || month == 9 || month == 11) {\\n            return 30;\\n        }\\n        else if (isLeapYear(year)) {\\n            return 29;\\n        }\\n        else {\\n            return 28;\\n        }\\n    }\\n\\n    function parseTimestamp(uint timestamp) internal pure returns (_DateTime memory dt) {\\n        uint secondsAccountedFor = 0;\\n        uint buf;\\n        uint8 i;\\n\\n        // Year\\n        dt.year = getYear(timestamp);\\n        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\\n        secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\\n\\n        // Month\\n        uint secondsInMonth;\\n        for (i = 1; i <= 12; i++) {\\n            secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\\n            if (secondsInMonth + secondsAccountedFor > timestamp) {\\n                dt.month = i;\\n                break;\\n            }\\n            secondsAccountedFor += secondsInMonth;\\n        }\\n\\n        // Day\\n        for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\\n            if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\\n                dt.day = i;\\n                break;\\n            }\\n            secondsAccountedFor += DAY_IN_SECONDS;\\n        }\\n\\n        // Hour\\n        dt.hour = getHour(timestamp);\\n\\n        // Minute\\n        dt.minute = getMinute(timestamp);\\n\\n        // Second\\n        dt.second = getSecond(timestamp);\\n\\n        // Day of week.\\n        dt.weekday = getWeekday(timestamp);\\n    }\\n\\n    function getYear(uint timestamp) public pure returns (uint16) {\\n        uint secondsAccountedFor = 0;\\n        uint16 year;\\n        uint numLeapYears;\\n\\n        // Year\\n        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\\n        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\\n\\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\\n        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\\n\\n        while (secondsAccountedFor > timestamp) {\\n            if (isLeapYear(uint16(year - 1))) {\\n                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\\n            }\\n            else {\\n                secondsAccountedFor -= YEAR_IN_SECONDS;\\n            }\\n            year -= 1;\\n        }\\n        return year;\\n    }\\n\\n    function getMonth(uint timestamp) public pure returns (uint8) {\\n        return parseTimestamp(timestamp).month;\\n    }\\n\\n    function getDay(uint timestamp) public pure returns (uint8) {\\n        return parseTimestamp(timestamp).day;\\n    }\\n\\n    function getHour(uint timestamp) public pure returns (uint8) {\\n        return uint8((timestamp / 60 / 60) % 24);\\n    }\\n\\n    function getMinute(uint timestamp) public pure returns (uint8) {\\n        return uint8((timestamp / 60) % 60);\\n    }\\n\\n    function getSecond(uint timestamp) public pure returns (uint8) {\\n        return uint8(timestamp % 60);\\n    }\\n\\n    function getWeekday(uint timestamp) public pure returns (uint8) {\\n        return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\\n    }\\n\\n    function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {\\n        return toTimestamp(year, month, day, 0, 0, 0);\\n    }\\n\\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {\\n        return toTimestamp(year, month, day, hour, 0, 0);\\n    }\\n\\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {\\n        return toTimestamp(year, month, day, hour, minute, 0);\\n    }\\n\\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {\\n        uint16 i;\\n\\n        // Year\\n        for (i = ORIGIN_YEAR; i < year; i++) {\\n            if (isLeapYear(i)) {\\n                timestamp += LEAP_YEAR_IN_SECONDS;\\n            }\\n            else {\\n                timestamp += YEAR_IN_SECONDS;\\n            }\\n        }\\n\\n        // Month\\n        uint8[12] memory monthDayCounts;\\n        monthDayCounts[0] = 31;\\n        if (isLeapYear(year)) {\\n            monthDayCounts[1] = 29;\\n        }\\n        else {\\n            monthDayCounts[1] = 28;\\n        }\\n        monthDayCounts[2] = 31;\\n        monthDayCounts[3] = 30;\\n        monthDayCounts[4] = 31;\\n        monthDayCounts[5] = 30;\\n        monthDayCounts[6] = 31;\\n        monthDayCounts[7] = 31;\\n        monthDayCounts[8] = 30;\\n        monthDayCounts[9] = 31;\\n        monthDayCounts[10] = 30;\\n        monthDayCounts[11] = 31;\\n\\n        for (i = 1; i < month; i++) {\\n            timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\\n        }\\n\\n        // Day\\n        timestamp += DAY_IN_SECONDS * (day - 1);\\n\\n        // Hour\\n        timestamp += HOUR_IN_SECONDS * (hour);\\n\\n        // Minute\\n        timestamp += MINUTE_IN_SECONDS * (minute);\\n\\n        // Second\\n        timestamp += second;\\n\\n        return timestamp;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}","ABI":"[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"INVEST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"}],\"name\":\"REGISTRATION\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"REINVEST\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"START_WORK\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WITHDRAW_BODY\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WITHDRAW_INCOME\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WITHDRAW_REF\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_parent\",\"type\":\"address\"}],\"name\":\"activateUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ceoAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countInvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"countUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fifthLineReferralPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstLineReferralPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fourthLineReferralPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getDay\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"getDaysInMonth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getHour\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"getLineInformation\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"usersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Office.LineInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLoops\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getMinute\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getMonth\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getSecond\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getWeekday\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWorker\",\"outputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"claimDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeZone\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"activateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEnd\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"usersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"investAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct Office.LineInfo[6]\",\"name\":\"lineInformation\",\"type\":\"tuple[6]\"},{\"internalType\":\"uint256\",\"name\":\"teamIncome\",\"type\":\"uint256\"}],\"internalType\":\"struct Office.Worker\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"getYear\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"}],\"name\":\"isLeapYear\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"}],\"name\":\"leapYearsBefore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secondLineReferralPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCeoAddress\",\"type\":\"address\"}],\"name\":\"setCeoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCommission\",\"type\":\"uint256\"}],\"name\":\"setWithdrawCommissionPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startWork\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thirdLineReferralPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minute\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"year\",\"type\":\"uint16\"},{\"internalType\":\"uint8\",\"name\":\"month\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"day\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"hour\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"minute\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"second\",\"type\":\"uint8\"}],\"name\":\"toTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"level\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"claimDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeZone\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"percent\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"parent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"activateTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalIncome\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamIncome\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRef\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","ContractName":"Office","CompilerVersion":"v0.8.15+commit.e14f2714","OptimizationUsed":"1","Runs":"200","ConstructorArguments":"","EVMVersion":"Default","Library":"","LicenseType":"","Proxy":"0","Implementation":"","SwarmSource":""}]}